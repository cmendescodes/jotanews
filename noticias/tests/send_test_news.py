import pika
import json
from datetime import datetime, timedelta
import random
import time

# Configura√ß√µes do RabbitMQ (ajuste se necess√°rio)
RABBITMQ_HOST = "localhost"  # ou IP p√∫blico se RabbitMQ estiver na nuvem
QUEUE_NAME = "noticias"

# Palavras-chave e simula√ß√µes para gerar as not√≠cias
TITULOS = [
    "Governo anuncia nova isen√ß√£o fiscal",
    "Avan√ßo da vacina√ß√£o contra gripe",
    "Sindicato discute reforma trabalhista",
    "Congresso aprova aumento no IR",
    "Hospitais enfrentam nova demanda de pacientes",
    "Presidente sanciona novo decreto econ√¥mico",
    "FGTS poder√° ser usado para novas modalidades",
    "Expectativas para semana no Senado",
    "Resumo matinal: decis√µes do STF",
    "Vacina da dengue tem resultados positivos"
]

CONTEUDOS = [
    "A proposta segue agora para san√ß√£o presidencial ap√≥s ampla maioria dos votos.",
    "Especialistas analisam impactos econ√¥micos e sociais da nova medida.",
    "A medida foi classificada como uma aposta da semana pelos analistas pol√≠ticos.",
    "Congresso debate isen√ß√µes para pequenos empres√°rios.",
    "SUS anuncia novo programa de atendimento domiciliar.",
    "Resumo matinal traz destaques da manh√£ desta ter√ßa-feira.",
    "O governo federal anunciou um novo decreto que altera a regulamenta√ß√£o atual.",
    "A reforma trabalhista divide opini√µes entre especialistas.",
    "Novas variantes da gripe geram alerta entre autoridades de sa√∫de.",
    "O mercado reage √†s proje√ß√µes da semana em Bras√≠lia."
]

# Gera uma not√≠cia com dados simulados
def gerar_noticia(i):
    titulo = random.choice(TITULOS)
    conteudo = random.choice(CONTEUDOS)
    fonte = "Ag√™ncia Jota"
    urgente = random.choice([True, False])
    data_publicacao = (datetime.now() - timedelta(hours=i)).isoformat()

    return {
        "titulo": titulo,
        "conteudo": conteudo,
        "fonte": fonte,
        "urgente": urgente,
        "data_publicacao": data_publicacao
    }

# Envia as mensagens para a fila
def enviar_noticias(qtd=20, delay=0.2):
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=QUEUE_NAME, durable=True)

    for i in range(qtd):
        noticia = gerar_noticia(i)
        channel.basic_publish(
            exchange='',
            routing_key=QUEUE_NAME,
            body=json.dumps(noticia),
            properties=pika.BasicProperties(delivery_mode=2)
        )
        print(f"üì® Not√≠cia {i+1} enviada: {noticia['titulo']}")
        time.sleep(delay)  # pequena pausa para simular fluxo real

    connection.close()
    print(f"\n‚úÖ {qtd} not√≠cias enviadas com sucesso.")

if __name__ == "__main__":
    enviar_noticias()
