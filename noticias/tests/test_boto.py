import boto3
import json
import random
from datetime import datetime, timedelta
import time

# Configura√ß√£o da fila SQS
SQS_QUEUE_URL = "https://sqs.sa-east-1.amazonaws.com/904368994684/noticias-queue"
sqs = boto3.client('sqs', region_name='sa-east-1')

# Palavras-chave e categorias para simular as not√≠cias
TITULOS = [
    "Governo anuncia nova isen√ß√£o fiscal",
    "Avan√ßo da vacina√ß√£o contra gripe",
    "Sindicato discute reforma trabalhista",
    "Congresso aprova aumento no IR",
    "Hospitais enfrentam nova demanda de pacientes",
    "Presidente sanciona novo decreto econ√¥mico",
    "FGTS poder√° ser usado para novas modalidades",
    "Expectativas para semana no Senado",
    "Resumo matinal: decis√µes do STF",
    "Vacina da dengue tem resultados positivos"
]

CONTEUDOS = [
    "A proposta segue agora para san√ß√£o presidencial ap√≥s ampla maioria dos votos.",
    "Especialistas analisam impactos econ√¥micos e sociais da nova medida.",
    "A medida foi classificada como uma aposta da semana pelos analistas pol√≠ticos.",
    "Congresso debate isen√ß√µes para pequenos empres√°rios.",
    "SUS anuncia novo programa de atendimento domiciliar.",
    "Resumo matinal traz destaques da manh√£ desta ter√ßa-feira.",
    "O governo federal anunciou um novo decreto que altera a regulamenta√ß√£o atual.",
    "A reforma trabalhista divide opini√µes entre especialistas.",
    "Novas variantes da gripe geram alerta entre autoridades de sa√∫de.",
    "O mercado reage √†s proje√ß√µes da semana em Bras√≠lia."
]

# Gera uma not√≠cia simulada com palavras-chave relevantes
def gerar_noticia(i):
    categorias_keywords = [
        ("Governo anuncia nova isen√ß√£o fiscal", "isencao fiscal"),
        ("Avan√ßo da vacina√ß√£o contra gripe", "vacina"),
        ("Sindicato discute reforma trabalhista", "sindicato"),
        ("Congresso aprova aumento no IR", "IR"),
        ("Hospitais enfrentam nova demanda de pacientes", "hospital"),
        ("Presidente sanciona novo decreto econ√¥mico", "decreto"),
        ("FGTS poder√° ser usado para novas modalidades", "FGTS"),
        ("Expectativas para semana no Senado", "senado"),
        ("Resumo matinal: decis√µes do STF", "STF"),
        ("Vacina da dengue tem resultados positivos", "vacina")
    ]
    
    # Garantir que a categoria e o conte√∫do possuem palavras-chave relevantes
    titulo, palavra_chave = random.choice(categorias_keywords)
    conteudo = random.choice(CONTEUDOS)
    conteudo += f" A palavra-chave associada √© {palavra_chave}."  # Garantir que a palavra-chave esteja no conte√∫do

    fonte = "Ag√™ncia Jota"
    urgente = random.choice([True, False])
    data_publicacao = (datetime.now() - timedelta(hours=i)).isoformat()

    return {
        "titulo": titulo,
        "conteudo": conteudo,
        "fonte": fonte,
        "urgente": urgente,
        "data_publicacao": data_publicacao
    }

# Envia as mensagens para a fila SQS
def send_test_news_messages(n=20, delay=0.2):
    for i in range(1, n+1):
        noticia = gerar_noticia(i)
        message_body = json.dumps(noticia)
        
        response = sqs.send_message(
            QueueUrl=SQS_QUEUE_URL,
            MessageBody=message_body
        )
        
        print(f"üì® Not√≠cia {i} enviada: {noticia['titulo']}")
        time.sleep(delay)  # Pausa entre envios para simular o fluxo real

    print(f"\n‚úÖ {n} not√≠cias enviadas com sucesso.")

if __name__ == "__main__":
    send_test_news_messages()
